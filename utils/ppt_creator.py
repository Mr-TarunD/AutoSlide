from pptx import Presentation
from pptx.util import Inches, Pt
import io

def create_ppt(bullet_points_text):
    """
    Creates a PowerPoint presentation from a string of bullet points.

    Args:
        bullet_points_text (str): A string with bullet points separated by newlines.

    Returns:
        An io.BytesIO object containing the PPTX file.
    """
    prs = Presentation()
    
    # Add Title Slide
    title_slide_layout = prs.slide_layouts[0] # Title slide layout
    slide = prs.slides.add_slide(title_slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1] # Placeholder index for subtitle

    title.text = "Presentation Summary"
    subtitle.text = "Generated by AutoSlide"

    # Process bullet points
    try:
        points = [
            p.strip().lstrip('*-').strip() # Clean up point
            for p in bullet_points_text.split('\n') 
            if p.strip() and p.strip().startswith(('*', '-'))
        ]
        
        if not points:
            points = ["No valid bullet points found to export."]

        # Group points onto slides (max 6 per slide)
        points_per_slide = 6
        chunked_points = [
            points[i : i + points_per_slide] 
            for i in range(0, len(points), points_per_slide)
        ]

        bullet_slide_layout = prs.slide_layouts[1] # Title and Content layout

        for i, chunk in enumerate(chunked_points):
            slide = prs.slides.add_slide(bullet_slide_layout)
            shapes = slide.shapes
            
            title_shape = shapes.title
            title_shape.text = f"Key Points (Part {i + 1})"
            
            body_shape = shapes.placeholders[1] # Placeholder index for content
            tf = body_shape.text_frame
            tf.clear() # Clear any default text
            tf.word_wrap = True

            for point_text in chunk:
                p = tf.add_paragraph()
                p.text = point_text
                p.level = 0
                p.font.size = Pt(20)

    except Exception as e:
        # Add an error slide if parsing fails
        slide = prs.slides.add_slide(bullet_slide_layout)
        slide.shapes.title.text = "Error"
        body_shape = slide.placeholders[1]
        tf = body_shape.text_frame
        p = tf.add_paragraph()
        p.text = f"Failed to generate slides: {e}"
        p.font.size = Pt(18)

    # Save to an in-memory stream
    file_stream = io.BytesIO()
    prs.save(file_stream)
    file_stream.seek(0) # Rewind the stream to the beginning
    
    return file_stream